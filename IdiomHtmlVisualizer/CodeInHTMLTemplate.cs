// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace IdiomHtmlVisualizer
{
    using System.Linq;
    using System.Text;
    using System.Web;
    using System.Collections.Generic;
    using IdiomHtmlVisualizer;
    using IdiomHtmlVisualizer.Model;
    using Microsoft.CodeAnalysis;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class CodeInHTMLTemplate : CodeInHTMLTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<html>\r\n<head>\r\n\t<style>span {white-space: pre ; font-family:\'Courier New\';}</s" +
                    "tyle>\r\n\t<style>\r\n\t\t#tooltip {\r\n\t\t  background-color: #333;\r\n\t\t  color: white;\r\n\t" +
                    "\t  padding: 5px 10px;\r\n\t\t  border-radius: 4px;\r\n\t\t  font-size: 13px;\r\n\t\t  displa" +
                    "y: none;\r\n\t\t}\r\n\r\n\t\t#arrow,\r\n\t\t#arrow::before {\r\n\t\t\tposition: absolute;\r\n\t\t\twidth" +
                    ": 8px;\r\n\t\t\theight: 8px;\r\n\t\t\tbackground: inherit;\r\n\t\t}\r\n\r\n\t\t#arrow {\r\n\t\t\tvisibili" +
                    "ty: hidden;\r\n\t\t}\r\n\r\n\t\t#arrow::before {\r\n\t\t\tvisibility: visible;\r\n\t\t\tcontent: \'\';" +
                    "\r\n\t\t\ttransform: rotate(45deg);\r\n\t\t}\r\n\r\n\t\t#tooltip[data-popper-placement^=\'top\'] " +
                    "> #arrow {\r\n\t\t\tbottom: -4px;\r\n\t\t}\r\n\r\n\t\t#tooltip[data-popper-placement^=\'bottom\']" +
                    " > #arrow {\r\n\t\t\ttop: -4px;\r\n\t\t}\r\n\r\n\t\t#tooltip[data-popper-placement^=\'left\'] > #" +
                    "arrow {\r\n\t\t\tright: -4px;\r\n\t\t}\r\n\r\n\t\t#tooltip[data-popper-placement^=\'right\'] > #a" +
                    "rrow {\r\n\t\t\tleft: -4px;\r\n\t\t}\r\n\r\n\t\t#tooltip[data-show] {\r\n\t\t\tdisplay: block;\r\n\t\t}\r" +
                    "\n\t</style>\r\n\t<style>\r\n\r\n\t\t#details-popup {\r\n\t\t  position: fixed;\r\n\t\t  top: 0;\r\n\t" +
                    "\t  bottom: 0;\r\n\t\t  left: 0;\r\n\t\t  right: 0;\r\n\t\t  background: rgba(0, 0, 0, 0.7);\r" +
                    "\n\t\t  transition: opacity 500ms;\r\n\t\t  visibility: hidden;\r\n\t\t  opacity: 0;\r\n\t\t  o" +
                    "verflow-y:scroll;\r\n\t\t}\r\n\r\n\t\t#details-popup-content {\r\n\t\t  margin: 70px auto;\r\n\t\t" +
                    "  padding: 20px;\r\n\t\t  background: #fff;\r\n\t\t  border-radius: 5px;\r\n\t\t  width: 30%" +
                    ";\r\n\t\t  position: relative;\r\n\t\t  transition: all 5s ease-in-out;\r\n\t\t}\r\n\r\n\t\t#detai" +
                    "ls-popup-content h2 {\r\n\t\t  margin: 0;\r\n\t\t  color: #333;\r\n\t\t  font-family: Tahoma" +
                    ", Arial, sans-serif;\r\n\t\t}\r\n\t\t#details-popup-close {\r\n\t\t  position: absolute;\r\n\t\t" +
                    "  top: 20px;\r\n\t\t  right: 30px;\r\n\t\t  transition: all 200ms;\r\n\t\t  font-size: 30px;" +
                    "\r\n\t\t  font-weight: bold;\r\n\t\t  text-decoration: none;\r\n\t\t  color: #555;\r\n\t\t}\r\n\t\t#" +
                    "details-popup-close:hover {\r\n\t\t  color: #111;\r\n\t\t  cursor: pointer;\r\n\t\t}\r\n\t\t#det" +
                    "ails-popup-content-body {\r\n\t\t  max-height: 30%;\r\n\t\t  overflow: auto;\r\n\t\t  font-f" +
                    "amily: Tahoma, Arial, sans-serif;\r\n\t\t  white-space: pre;\r\n\t\t}\r\n\r\n\t\t#details-popu" +
                    "p-content-text {\r\n\t\t  margin: 0;\r\n\t\t}\r\n\r\n\t\t@media screen and (max-width: 700px){" +
                    "\r\n\t\t  #details-popup-content{\r\n\t\t\twidth: 70%;\r\n\t\t  }\r\n\t\t}\r\n\t</style>\r\n\t<script>\r" +
                    "\n\t\tfunction highlight(x, sameIdiomsNo, sameSubtreesNo) {\r\n\t\t\tlet className = x.c" +
                    "lassName;\r\n\t\t\tlet previousColor = x.style.backgroundColor;\r\n\r\n\t\t\tlocalStorage.se" +
                    "tItem(\'previousColor\', previousColor);\r\n\r\n\t\t\tlet idiomElements = document.getEle" +
                    "mentsByClassName(className);\r\n\r\n\t\t\tfor(var i=0;i<idiomElements.length;i++){\r\n\t\t\t" +
                    "\tidiomElements[i].style.backgroundColor = \'#257AFD\';\r\n\t\t\t}\r\n\r\n\t\t\tconst idiomMark" +
                    "Text = document.querySelector(\'#idiom-mark\');\r\n\t\t\tconst idiomsSameText = documen" +
                    "t.querySelector(\'#idioms-same\');\r\n\t\t\tconst subtreesSameText = document.querySele" +
                    "ctor(\'#subtrees-same\');            \r\n\t\t\t\r\n\t\t\tidiomMarkText.textContent = \'mark: " +
                    "\' + className.substring(0,8);\r\n\t\t\tidiomsSameText.textContent = \'\\nsame idioms: \'" +
                    " + sameIdiomsNo;\r\n\t\t\t\r\n\t\t\tlet sameSubtrees = sameSubtreesNo > 0 ? sameSubtreesNo" +
                    " : \'-\';\r\n\t\t\tsubtreesSameText.textContent = \'\\nsame subtrees: \' + sameSubtrees;\r\n" +
                    "\r\n\r\n\t\t\tconst tooltip = document.querySelector(\'#tooltip\');\r\n\t\t\tPopper.createPopp" +
                    "er(x, tooltip , {\r\n\t\t\t\tmodifiers: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\tname: \'offset\',\r\n\t\t\t\t\toptions:" +
                    " {\r\n\t\t\t\t\t\toffset: [0, 8],\r\n\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t});\r\n\t\t\ttooltip.setAttri" +
                    "bute(\'data-show\', \'\');\r\n\t\t}\r\n\r\n\t\tfunction unhighlight(x) {\r\n\t\t\tlet className = x" +
                    ".className;\r\n\r\n\t\t\tvar previousColor = localStorage.getItem(\'previousColor\', prev" +
                    "iousColor);\r\n\r\n\t\t\tlet idiomElements = document.getElementsByClassName(className)" +
                    ";\r\n\r\n\t\t\tfor(var i=0;i<idiomElements.length;i++){\r\n\t\t\t\tidiomElements[i].style.bac" +
                    "kgroundColor = previousColor;\r\n\t\t\t}\r\n\r\n\t\t\tconst tooltip = document.querySelector" +
                    "(\'#tooltip\');\r\n\t\t\ttooltip.removeAttribute(\'data-show\' );\r\n\t\t}\r\n\t\t\r\n\t\tfunction se" +
                    "lectIdiom(x, sameIdiomsNo, sameSubtreesNo, idiomCodeEncoded, filesThatHaveIt) {\r" +
                    "\n\t\t\tlet className = x.className;\r\n\r\n\t\t\tlet overlay = document.getElementById(\"de" +
                    "tails-popup\");\r\n\t\t\toverlay.style.visibility = \'visible\'; \r\n\t\t\toverlay.style.opac" +
                    "ity = 1;\r\n\r\n\t\t\tlet content = document.getElementById(\"details-popup-content-text" +
                    "\");\r\n\r\n\t\t\tcontent.textContent = \'\'; // Clear everything\r\n\t\t\tcontent.textContent " +
                    "+= \'\\nsame idioms: \' + sameIdiomsNo;\r\n\t\t\t\r\n\t\t\tlet sameSubtrees = sameSubtreesNo " +
                    "> 0 ? sameSubtreesNo : \'-\';\r\n\t\t\tcontent.textContent += \'\\nsame subtrees: \' + sam" +
                    "eSubtrees;\r\n\r\n\t\t\tcontent.textContent += \'\\n\\nidiom json: \' + atob(idiomCodeEncod" +
                    "ed);\r\n\r\n\t\t\tlet listWithLinks = document.getElementById(\"details-popup-content-li" +
                    "nks\");\r\n\t\t\tlistWithLinks.innerHTML = \'\';\r\n\t\t\t\r\n\t\t\tfor (const file of filesThatHa" +
                    "veIt) {\r\n\t\t\t\tlet createdLI = createListItemAnchor(\'./\' + file + \'#\' + className," +
                    " `Idiom in ${file}`);\r\n\t\t\t\tlistWithLinks.append(createdLI);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunc" +
                    "tion createListItemAnchor(link, text) {\r\n\t\t\tlet li = document.createElement(\'li\'" +
                    ");\r\n\t\t\tlet a = document.createElement(\'a\'); \r\n\t\t\t\t\r\n\t\t\tlet linkText = document.c" +
                    "reateTextNode(text);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\ta.appendChild(linkText); \r\n\t\t\ta.href = link; " +
                    "\r\n\t\t\t\t\r\n\t\t\tli.appendChild(a);\r\n\t\t\t\r\n\t\t\treturn li;\r\n\t\t}\r\n\r\n\t\tfunction deselectIdi" +
                    "om(x) {\r\n\t\t\tlet overlay = document.getElementById(\"details-popup\")\r\n\t\t\toverlay.s" +
                    "tyle.visibility = \'hidden\'; \r\n\t\t\toverlay.style.opacity = 0;\r\n\t\t}\r\n\t</script>\r\n</" +
                    "head>\r\n<body>\r\n");
            
            #line 225 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
 
	var alreadySeenMarks = new List<string>();
	var previousTokenMark = string.Empty;
	foreach (var token in Tokens)
	{
		var nodeHashValue = NodeHasher.CalculateNodeHash(token.ValueText, token.Span.Start, token.Span.End);

		var tokenMark = VisualizationData.Source2TargetMapping.GetValueOrDefault(nodeHashValue);
		if (tokenMark == null)
		{
			throw new DataMisalignedException("For some reason, tokenGuid not found :(");
		}

		if (tokenMark == previousTokenMark)
		{

            
            #line default
            #line hidden
            
            #line 240 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(HttpUtility.HtmlEncode(token.ToFullString())));
            
            #line default
            #line hidden
            
            #line 240 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
		
		}
		else 
		{
			if (previousTokenMark != string.Empty)
			{

            
            #line default
            #line hidden
            this.Write("</span>");
            
            #line 246 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"

			}
			var idiomHandler = VisualizationData.IdiomHandler;
			var idiom = idiomHandler.MarksIdiomsMap[tokenMark];
			var sameIdiomsNo = idiomHandler.IdiomRoots[idiom].Count;

			var sameSubtreesNo = 0;
			if (idiomHandler.IdenticalSubtreeRoots.ContainsKey(idiom))
			{
				sameSubtreesNo = idiomHandler.IdenticalSubtreeRoots[idiom].Count;
			}

			var codeFragment = idiomHandler.MarksIdiomCodeMap[tokenMark];
			var codeFragmentBinary = Encoding.UTF8.GetBytes(codeFragment);
			var codeFragmentEncoded = Convert.ToBase64String(codeFragmentBinary);

			previousTokenMark = tokenMark;

			var shouldAddId = false;
			if(!alreadySeenMarks.Contains(tokenMark))
			{
				shouldAddId = true;
				alreadySeenMarks.Add(tokenMark);
			}

			var treeBankIdiom = idiomHandler.MarksIdiomsMap[tokenMark];
			var containingFiles = idiomHandler.IdiomsInFiles[treeBankIdiom].ToList().Select(s => s + ".htm").ToList();



            
            #line default
            #line hidden
            this.Write("<span style=\"background-color:");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ColorHelper.GetIdiomColor(tokenMark)));
            
            #line default
            #line hidden
            this.Write(";\" class=\"");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tokenMark));
            
            #line default
            #line hidden
            this.Write("\" ");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
 if(shouldAddId) { Write($"id=\"{tokenMark}\"");} 
            
            #line default
            #line hidden
            this.Write(" onmouseover=\"highlight(this,");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sameIdiomsNo));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sameSubtreesNo));
            
            #line default
            #line hidden
            this.Write(")\" onmouseout=\"unhighlight(this)\" onclick=\"selectIdiom(this,");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sameIdiomsNo));
            
            #line default
            #line hidden
            this.Write(",");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sameSubtreesNo));
            
            #line default
            #line hidden
            this.Write(", \'");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(codeFragmentEncoded));
            
            #line default
            #line hidden
            this.Write("\', [ ");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(",", containingFiles.Select(cf => "'" + cf + "'").ToList())));
            
            #line default
            #line hidden
            this.Write(" ])\"> ");
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(HttpUtility.HtmlEncode(token.ToFullString())));
            
            #line default
            #line hidden
            
            #line 275 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
		
		}
	}	

            
            #line default
            #line hidden
            this.Write(@"</span>
<div id=""tooltip"" role=""tooltip"">
	<span id=""idiom-mark""></span>
	<span id=""idioms-same""></span>
	<span id=""subtrees-same""></span>
	<div id=""arrow"" data-popper-arrow></div>
</div>

<div id=""details-popup"">
	<div id=""details-popup-content"">
		<h2>Details</h2>
		<a id=""details-popup-close"" onclick=""deselectIdiom()"">&times;</a>
		<div id=""details-popup-content-body"">
			<p id=""details-popup-content-text"">
			</p>
			<ul style=""padding-left: 0px;"" id=""details-popup-content-links"">
			</ul>
		</div>
	</div>
</div>
<script src=""https://unpkg.com/@popperjs/core@2/dist/umd/popper.js""></script>
</body>
</html>

");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 302 "C:\Users\ntodo\Desktop\Doktorske\evaluacija\RoseLibML\IdiomHtmlVisualizer\CodeInHTMLTemplate.tt"
   
	
	public ColorHelper ColorHelper { get; set; }
	public VisualizationData VisualizationData { get; set; }
	public IEnumerable<SyntaxToken> Tokens { get; set; }
	

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class CodeInHTMLTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        public System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
