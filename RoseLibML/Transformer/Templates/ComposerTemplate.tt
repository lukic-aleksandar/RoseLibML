<#@ template language="C#" inherits="BaseTemplate" #>
<#@ assembly name="System.Core" #>
<# AddTemplateHeader(); #>

using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System;
using System.Linq;

namespace RoseLibApp.RoseLib.Composers
{
    public partial class <#=composer#>
    {
        public <#=composer#> <#=methodName#>(<#
            for(int i = 0; i < methodParameters.Count; i++)
            {
                Write("string " + methodParameters[i]);
                if(i < methodParameters.Count-1){
                    Write(", ");
                }
            }
        #>)  
        {

            if (!IsAtRoot())
            {
                throw new Exception("A <#=composer.Replace("Composer", "").ToLower()#> must be selected (which is also a root to the composer)");
            }

            string fragment = String.Format("<#=fragment#>"<#
            for(int i = 0; i < methodParameters.Count; i++)
            {
                Write(", " + methodParameters[i]);
            }
        #>);

            var compilationUnit = CSharpSyntaxTree.ParseText(fragment).GetRoot();

            var members = (compilationUnit as CompilationUnitSyntax).Members.ToArray();

            var newNode = (CurrentNode as <#=node#>)<#
                if (rootCSType.Equals("UsingDirective")) {
                    Write(".AddUsings");
                }
                else {
                    Write(".AddMembers");
                }
                #>(members);
            
            Replace(CurrentNode, newNode, null);

            return this;
        }
    }
}